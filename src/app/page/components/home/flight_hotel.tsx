"use client";

import React, { useState } from "react";
import "./flight_hotel.css";
import { FaPlus, FaSearch, FaMapMarkerAlt, FaPlane, FaHotel } from "react-icons/fa";
import Image from "next/image";
import Link from "next/link";
import "./home_page.css";
import { useRouter } from "next/navigation";

// Interface cho Hotel
interface HotelCard {
  id: number;
  name: string;
  link: string;
  description: string;
  price: string;
  name_nearby_place: string;
  hotel_class: string;
  img_origin: string;
  location_rating: number;
  amenities: string[];
}

// Th√™m data hotels
const hotels = [
  {
    id: 1,
    name: "Melia Vinpearl ƒê√† N·∫µng",
    link: "https://example.com/hotel1",
    description:
      "Kh√°ch s·∫°n 5 sao sang tr·ªçng v·ªõi t·∫ßm nh√¨n ra bi·ªÉn, cung c·∫•p d·ªãch v·ª• spa cao c·∫•p v√† nhi·ªÅu ti·ªán nghi gi·∫£i tr√≠.",
    price: "2,500,000 VND",
    name_nearby_place: "B√£i bi·ªÉn M·ªπ Kh√™",
    hotel_class: "5 sao",
    img_origin: "/images/melia-vinpearl.jpg",
    location_rating: 4.8,
    amenities: ["H·ªì b∆°i", "Spa", "Nh√† h√†ng", "Ph√≤ng gym", "Bar"],
  },
  {
    id: 2,
    name: "Novotel Hu·∫ø",
    link: "/images/NovotelHu·∫ø.jpg",
    description:
      "T·ªça l·∫°c b√™n s√¥ng H∆∞∆°ng th∆° m·ªông, kh√°ch s·∫°n cung c·∫•p kh√¥ng gian ngh·ªâ d∆∞·ª°ng y√™n tƒ©nh v√† sang tr·ªçng.",
    price: "1,800,000 VND",
    name_nearby_place: "C·∫ßu Tr∆∞·ªùng Ti·ªÅn",
    hotel_class: "4 sao",
    img_origin: "/images/NovotelHu·∫ø.jpg",
    location_rating: 4.6,
    amenities: ["Wifi mi·ªÖn ph√≠", "Nh√† h√†ng", "Ph√≤ng h·ªçp", "D·ªãch v·ª• ƒë∆∞a ƒë√≥n"],
  },
  {
    id: 3,
    name: "Sheraton Grand ƒê√† N·∫µng",
    link: "https://example.com/hotel3",
    description:
      "Resort sang tr·ªçng v·ªõi ki·∫øn tr√∫c hi·ªán ƒë·∫°i, cung c·∫•p d·ªãch v·ª• ƒë·∫≥ng c·∫•p 5 sao v√† t·∫ßm nh√¨n tuy·ªát ƒë·∫πp ra bi·ªÉn.",
    price: "3,200,000 VND",
    name_nearby_place: "C·∫ßu R·ªìng",
    hotel_class: "5 sao",
    img_origin: "/images/sheraton-danang.jpg",
    location_rating: 4.9,
    amenities: ["B√£i bi·ªÉn ri√™ng", "Spa", "Nh√† h√†ng", "Bar", "H·ªì b∆°i v√¥ c·ª±c"],
  },
  {
    id: 4,
    name: "La Residence Hu·∫ø",
    link: "https://example.com/hotel4",
    description:
      "Kh√°ch s·∫°n boutique v·ªõi phong c√°ch Art Deco ƒë·ªôc ƒë√°o, mang ƒë·∫øn tr·∫£i nghi·ªám l∆∞u tr√∫ ƒë·∫≥ng c·∫•p t·∫°i c·ªë ƒë√¥.",
    price: "2,800,000 VND",
    name_nearby_place: "ƒê·∫°i N·ªôi Hu·∫ø",
    hotel_class: "5 sao",
    img_origin: "/images/la-residence-hue.jpg",
    location_rating: 4.7,
    amenities: ["Nh√† h√†ng Ph√°p", "Spa", "H·ªì b∆°i", "Bar", "D·ªãch v·ª• xe ƒë·∫°p"],
  },
];

const CircularText = () => {
  return (
    <svg className="circular-text" viewBox="0 0 500 500">
      <path id="curve" fill="transparent" d="M250,250 m-150,0 a150,150 0 1,1 300,0 a150,150 0 1,1 -300,0" />
      <text>
        <textPath xlinkHref="#curve">
          Are you looking for a hotel and flight for your upcoming trip?
        </textPath>
      </text>
    </svg>
  );
};

const FlightHotel = () => {
  const router = useRouter();
  const [selectedHotel, setSelectedHotel] = useState<HotelCard | null>(null);
  const [showHotelDetail, setShowHotelDetail] = useState(false);
  const [departureInput, setDepartureInput] = useState("");
  const [destinationInput, setDestinationInput] = useState("");
  const [showDepartureDropdown, setShowDepartureDropdown] = useState(false);
  const [showDestinationDropdown, setShowDestinationDropdown] = useState(false);
  const [showSearchCard, setShowSearchCard] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState("");
  const [flightDate, setFlightDate] = useState("");
  const [flights, setFlights] = useState<any[]>([]);
  const [recommendedHotels, setRecommendedHotels] = useState<HotelCard[]>([]);

  const vietnamProvinces = [
    "An Giang",
    "B√† R·ªãa - V≈©ng T√†u",
    "B·∫Øc Giang",
    "B·∫Øc K·∫°n",
    "B·∫°c Li√™u",
    "B·∫Øc Ninh",
    "B·∫øn Tre",
    "B√¨nh ƒê·ªãnh",
    "B√¨nh D∆∞∆°ng",
    "B√¨nh Ph∆∞·ªõc",
    "B√¨nh Thu·∫≠n",
    "C√† Mau",
    "C·∫ßn Th∆°",
    "Cao B·∫±ng",
    "ƒê√† N·∫µng",
    "ƒê·∫Øk L·∫Øk",
    "ƒê·∫Øk N√¥ng",
    "ƒêi·ªán Bi√™n",
    "ƒê·ªìng Nai",
    "ƒê·ªìng Th√°p",
    "Gia Lai",
    "H√† Giang",
    "H√† Nam",
    "H√† N·ªôi",
    "H√† Tƒ©nh",
    "H·∫£i D∆∞∆°ng",
    "H·∫£i Ph√≤ng",
    "H·∫≠u Giang",
    "H√≤a B√¨nh",
    "H∆∞ng Y√™n",
    "Kh√°nh H√≤a",
    "Ki√™n Giang",
    "Kon Tum",
    "Lai Ch√¢u",
    "L√¢m ƒê·ªìng",
    "L·∫°ng S∆°n",
    "L√†o Cai",
    "Long An",
    "Nam ƒê·ªãnh",
    "Ngh·ªá An",
    "Ninh B√¨nh",
    "Ninh Thu·∫≠n",
    "Ph√∫ Th·ªç",
    "Ph√∫ Y√™n",
    "Qu·∫£ng B√¨nh",
    "Qu·∫£ng Nam",
    "Qu·∫£ng Ng√£i",
    "Qu·∫£ng Ninh",
    "Qu·∫£ng Tr·ªã",
    "S√≥c TrƒÉng",
    "S∆°n La",
    "T√¢y Ninh",
    "Th√°i B√¨nh",
    "Th√°i Nguy√™n",
    "Thanh H√≥a",
    "Th·ª´a Thi√™n Hu·∫ø",
    "Ti·ªÅn Giang",
    "TP H·ªì Ch√≠ Minh",
    "Tr√† Vinh",
    "Tuy√™n Quang",
    "Vƒ©nh Long",
    "Vƒ©nh Ph√∫c",
    "Y√™n B√°i",
    
  ];

  const handleHotelClick = (hotel: HotelCard) => {
    setSelectedHotel(hotel);
    setShowHotelDetail(true);
  };

  const handleCloseHotelDetail = () => {
    setShowHotelDetail(false);
    setSelectedHotel(null);
  };

  const handleDepartureChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDepartureInput(e.target.value);
    setShowDepartureDropdown(true);
  };

  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDestinationInput(e.target.value);
    setShowDestinationDropdown(true);
  };

  const handleProvinceSelect = (
    province: string,
    type: "departure" | "destination"
  ) => {
    if (type === "departure") {
      setDepartureInput(province);
      setShowDepartureDropdown(false);
    } else {
      setDestinationInput(province);
      setShowDestinationDropdown(false);
    }
  };

  const handleSearchButtonClick = () => {
    setShowSearchCard(true);
  };

  const handleCloseSearchCard = () => {
    setShowSearchCard(false);
    setSelectedLocation("");
  };

  const handleConfirmLocation = () => {
    if (selectedLocation) {
      router.push(`/?location=${selectedLocation}`);
    }
  };

  const handleSearchFlight = async () => {
    const flightPayload = {
        origin: departureInput,
        destination: destinationInput,
        departure_date: flightDate
    };
    try {
        const flightResponse = await fetch(
            "http://127.0.0.1:8000/recommend/rcm-flight/",
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(flightPayload),
            }
        );
        const flightData = await flightResponse.json();
        setFlights(flightData);
        // Sau khi t√¨m chuy·∫øn bay th√†nh c√¥ng, g·ªçi API recommend kh√°ch s·∫°n
        handleSearchHotels();
    } catch (error) {
        console.error("Error fetching flights:", error);
    }
  };

  const handleSearchHotels = async () => {
    const hotelPayload = { destinationInput };
    try {
        const hotelResponse = await fetch(
            "http://127.0.0.1:8000/recommend/rcm-hotel/",
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(hotelPayload),
            }
        );
        //D≈©ng  code trang n√†y .... 
        const hotelData = await hotelResponse.json();
        const hotelsArray = hotelData.hotels ? hotelData.hotels.slice(0, 12) : [];
        setRecommendedHotels(hotelsArray);
    } catch (error) {
        console.error("Error fetching hotels:", error);
    }
  };

  return (
    <div className="flight-hotel-container">
      <div className="hero-header">
        <div className="hero-icons">
          <div className="plane-icon">
            <FaPlane size={120} />
          </div>
          <div className="plane-icon">
            <FaPlane size={120} />
          </div>
          <div className="hotel-icon">
            <FaHotel size={150} />
          </div>
          <div className="hotel-icon">
            <FaHotel size={150} />
          </div>
        </div>
        <CircularText />
        <div className="hero-content">
          <h1>Find Your Perfect Stay & Flight</h1>
        </div>
      </div>

      <div className="flight-search-container">
        <div className="flight-search-input">
          <div className="input-group">
            <span className="input-icon">‚úàÔ∏è</span>
            <div className="input-wrapper">
              <label>Departure</label>
              <input
                type="text"
                value={departureInput}
                onChange={handleDepartureChange}
                placeholder="From where?"
                onFocus={() => setShowDepartureDropdown(true)}
              />
              {showDepartureDropdown && (
                <div className="province-dropdown">
                  {vietnamProvinces
                    .filter((province) =>
                      province
                        .toLowerCase()
                        .includes(departureInput.toLowerCase())
                    )
                    .map((province, index) => (
                      <div
                        key={index}
                        className="province-item"
                        onClick={() =>
                          handleProvinceSelect(province, "departure")
                        }
                      >
                        {province}
                      </div>
                    ))}
                </div>
              )}
            </div>
          </div>

          <div className="input-group">
            <span className="input-icon">üèÅ</span>
            <div className="input-wrapper">
              <label>Destination</label>
              <input
                type="text"
                value={destinationInput}
                onChange={handleDestinationChange}
                placeholder="Where to?"
                onFocus={() => setShowDestinationDropdown(true)}
              />
              {showDestinationDropdown && (
                <div className="province-dropdown">
                  {vietnamProvinces
                    .filter((province) =>
                      province
                        .toLowerCase()
                        .includes(destinationInput.toLowerCase())
                    )        //D≈©ng  code trang n√†y .... 

                    .map((province, index) => (
                      <div
                        key={index}
                        className="province-item"
                        onClick={() =>
                          handleProvinceSelect(province, "destination")
                        }
                      >
                        {province}
                      </div>
                    ))}
                </div>
              )}
            </div>
          </div>

          <div className="input-group">
            <span className="input-icon">üìÖ</span>
            <div className="input-wrapper">
              <label>Ng√†y ƒëi</label>
              <input
                type="date"
                value={flightDate}
                onChange={(e) => setFlightDate(e.target.value)}
              />
            </div>
          </div>

          {/* <div className="input-group">
            <span className="input-icon">üìÖ</span>
            <div className="input-wrapper">
              <label>Check-out</label>
              <input type="date" />
            </div>
          </div> */}
        </div>

        <button className="search-flight-btn" onClick={handleSearchFlight}>
          T√¨m chuy·∫øn bay
        </button>
      </div>

      {flights.length > 0 && (
        <section className="flight-results-section">
          <h2>K·∫øt qu·∫£ chuy·∫øn bay</h2>
          <div className="destinations-grid">
            {flights.map((flight, index) => (
              <div key={index} className="destination-card">
                <div className="card-content">
                  <h3>Chuy·∫øn bay: {flight.outbound_flight_code}</h3>
                  <div className="card-details">
                    <div className="trip-info">
                      <p>Th·ªùi gian kh·ªüi h√†nh: {flight.outbound_time}</p>
                      <p>Gi√° v√©: {flight.total_price_vnd}</p>
                      <p>Gi√° c∆° b·∫£n: {flight.base_price_vnd}</p>
                      <p>Lo·∫°i v√©: {flight.fare_basis}</p>
                      <p>H·∫°ng gh·∫ø: {flight.cabin}</p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </section>
      )}

      {recommendedHotels.length > 0 && (
        <section className="recommended-hotels-section">
          <h2>Kh√°ch s·∫°n ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t t·∫°i {destinationInput}</h2>
          <div className="destinations-grid">
            {recommendedHotels.map((hotel, index) => (
              <div
                key={index}
                className="destination-card hotel-card"
                onClick={() => handleHotelClick(hotel)}
              >
                <div className="relative">
                  <img src={hotel.img_origin.split(",")[0].trim()} alt={hotel.name} />
                </div>
                <div className="card-content">
                  <h3>{hotel.name}</h3>
                  <div className="card-details">
                    <div className="hotel-info">
                      <span className="hotel-class">{hotel.hotel_class}</span>
                      <span className="rating">‚òÖ {hotel.location_rating}</span>
                    </div>
                    <div className="trip-info">
                      <h1>{hotel.name_nearby_place}</h1>
                      <span className="price">{hotel.price}/ƒë√™m</span>
                      <span className="description">
                        {hotel.description.length > 100
                          ? hotel.description.substring(0, 100) + "..."
                          : hotel.description}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </section>
      )}

      <section className="hotels-section">
        <h2>Featured Hotels</h2>
        <div className="hotels-grid">
          {hotels.map((hotel) => (
            <div key={hotel.id} className="hotel-card" onClick={() => handleHotelClick(hotel)}>
              <img 
                src={hotel.img_origin} 
                alt={hotel.name} 
                className="hotel-image"
              />
              <div className="hotel-content">
                <h3 className="hotel-title">{hotel.name}</h3>
                <div className="hotel-info">
                  <div className="hotel-rating">
                    <span>‚òÖ</span>
                    <span>{hotel.location_rating}</span>
                  </div>
                  <div className="hotel-class">{hotel.hotel_class}</div>
                </div>
                <div className="hotel-location">
                  <span>üìç</span>
                  <span>{hotel.name_nearby_place}</span>
                </div>
                <div className="hotel-price">{hotel.price}</div>
                <p className="hotel-description">{hotel.description}</p>
                <div className="hotel-amenities">
                  {hotel.amenities.map((amenity, index) => (
                    <span key={index} className="amenity-tag">
                      {amenity}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>

      {showHotelDetail && selectedHotel && (
        <div
          className="destination-detail-overlay active"
          onClick={handleCloseHotelDetail}
        >
          {/* ... existing hotel detail modal ... */}
        </div>
      )}
    </div>
  );
};

export default FlightHotel;
